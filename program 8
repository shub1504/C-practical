#include <iostream>
using namespace std;

class Matrix {
private:
    int rows, cols;
    int** mat;

public:
    // Constructor to create and initialize a matrix
    Matrix(int r, int c) {
        rows = r;
        cols = c;
        mat = new int*[rows];
        for (int i = 0; i < rows; i++) {
            mat[i] = new int[cols];
        }
    }

    // Destructor to release the allocated memory
    ~Matrix() {
        for (int i = 0; i < rows; i++) {
            delete[] mat[i];
        }
        delete[] mat;
    }

    // Function to input matrix elements
    void input() {
        cout << "Enter elements for " << rows << "x" << cols << " matrix:" << endl;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cin >> mat[i][j];
            }
        }
    }

    // Function to display the matrix
    void display() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << mat[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Function to add two matrices
    Matrix add(const Matrix& other) {
        if (rows != other.rows || cols != other.cols) {
            throw invalid_argument("Matrices must have the same dimensions for addition.");
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.mat[i][j] = mat[i][j] + other.mat[i][j];
            }
        }
        return result;
    }

    // Function to multiply two matrices
    Matrix multiply(const Matrix& other) {
        if (cols != other.rows) {
            throw invalid_argument("The number of columns of the first matrix must be equal to the number of rows of the second matrix for multiplication.");
        }
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < other.cols; j++) {
                result.mat[i][j] = 0;
                for (int k = 0; k < cols; k++) {
                    result.mat[i][j] += mat[i][k] * other.mat[k][j];
                }
            }
        }
        return result;
    }

    // Function to find the transpose of a matrix
    Matrix transpose() {
        Matrix result(cols, rows); // transpose swaps rows and cols
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.mat[j][i] = mat[i][j];
            }
        }
        return result;
    }

    // Function to get the number of rows
    int getRows() const {
        return rows;
    }

    // Function to get the number of columns
    int getCols() const {
        return cols;
    }
};

int main() {
    int rows1, cols1, rows2, cols2;
    int choice;
    
    cout << "Enter the number of rows and columns for the first matrix: ";
    cin >> rows1 >> cols1;
    Matrix m1(rows1, cols1);
    m1.input();
    
    cout << "Enter the number of rows and columns for the second matrix: ";
    cin >> rows2 >> cols2;
    Matrix m2(rows2, cols2);
    m2.input();

    do {
        cout << "\nMenu:\n";
        cout << "1. Sum of matrices\n";
        cout << "2. Product of matrices\n";
        cout << "3. Transpose of first matrix\n";
        cout << "4. Transpose of second matrix\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        try {
            switch (choice) {
                case 1: {
                    if (rows1 == rows2 && cols1 == cols2) {
                        Matrix result = m1.add(m2);
                        cout << "Sum of matrices:\n";
                        result.display();
                    } else {
                        cout << "Error: Matrices must have the same dimensions to add.\n";
                    }
                    break;
                }
                case 2: {
                    if (cols1 == rows2) {
                        Matrix result = m1.multiply(m2);
                        cout << "Product of matrices:\n";
                        result.display();
                    } else {
                        cout << "Error: Matrices cannot be multiplied, invalid dimensions.\n";
                    }
                    break;
                }
                case 3: {
                    Matrix result = m1.transpose();
                    cout << "Transpose of first matrix:\n";
                    result.display();
                    break;
                }
                case 4: {
      
