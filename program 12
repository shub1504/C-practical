#include <iostream>
#include <stdexcept>  // For exception handling
using namespace std;

// Custom Exception for Matrix operations
class MatrixException : public std::exception {
private:
    string message;
public:
    // Constructor to set the error message
    MatrixException(const string& msg) : message(msg) {}
    
    // Override the what() method to return the error message
    const char* what() const noexcept override {
        return message.c_str();
    }
};

// Matrix class
class Matrix {
private:
    int rows, cols;
    int** mat;

public:
    // Constructor to create and initialize the matrix
    Matrix(int r, int c) : rows(r), cols(c) {
        mat = new int*[rows];
        for (int i = 0; i < rows; i++) {
            mat[i] = new int[cols];
        }
    }

    // Destructor to free memory
    ~Matrix() {
        for (int i = 0; i < rows; i++) {
            delete[] mat[i];
        }
        delete[] mat;
    }

    // Function to input matrix elements
    void input() {
        cout << "Enter elements for " << rows << "x" << cols << " matrix:" << endl;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cin >> mat[i][j];
            }
        }
    }

    // Function to display matrix elements
    void display() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << mat[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Function to add two matrices
    Matrix add(const Matrix& other) {
        if (rows != other.rows || cols != other.cols) {
            throw MatrixException("Error: Matrices must have the same dimensions for addition.");
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.mat[i][j] = mat[i][j] + other.mat[i][j];
            }
        }
        return result;
    }

    // Function to multiply two matrices
    Matrix multiply(const Matrix& other) {
        if (cols != other.rows) {
            throw MatrixException("Error: Matrices cannot be multiplied due to incompatible dimensions.");
        }
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < other.cols; j++) {
                result.mat[i][j] = 0;
                for (int k = 0; k < cols; k++) {
                    result.mat[i][j] += mat[i][k] * other.mat[k][j];
                }
            }
        }
        return result;
    }

    // Function to find the transpose of a matrix
    Matrix transpose() {
        Matrix result(cols, rows); // Transpose swaps rows and cols
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.mat[j][i] = mat[i][j];
            }
        }
        return result;
    }

    // Getter for number of rows
    int getRows() const {
        return rows;
    }

    // Getter for number of columns
    int getCols() const {
        return cols;
    }
};

// Main function with exception handling
int main() {
    try {
        int rows1, cols1, rows2, cols2;

        // Input dimensions for two matrices
        cout << "Enter rows and columns for the first matrix: ";
        cin >> rows1 >> cols1;
        Matrix m1(rows1, cols1);
        m1.input();

        cout << "Enter rows and columns for the second matrix: ";
        cin >> rows2 >> cols2;
        Matrix m2(rows2, cols2);
        m2.input();

        // Choose operation to perform
        int choice;
        do {
            cout << "\nMenu:\n";
            cout << "1. Add Matrices\n";
            cout << "2. Multiply Matrices\n";
            cout << "3. Transpose of Matrix 1\n";
            cout << "4. Transpose of Matrix 2\n";
            cout << "5. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
                case 1: {
                    // Add Matrices
                    try {
                        Matrix result = m1.add(m2);
                        cout << "Sum of matrices:\n";
                        result.display();
                    } catch (const MatrixException& e) {
                        cout << e.what() << endl;
                    }
                    break;
                }
                case 2: {
                    // Multiply Matrices
                    try {
                        Matrix result = m1.multiply(m2);
                        cout << "Product of matrices:\n";
                        result.display();
                    } catch (const MatrixException& e) {
                        cout << e.what() << endl;
                    }
                    break;
                }
                case 3: {
                    // Transpose of Matrix 1
                    Matrix result = m1.transpose();
                    cout << "Transpose of first matrix:\n";
                    result.display();
                    break;
                }
                case 4: {
                    // Transpose of Matrix 2
                    Matrix result = m2.transpose()
